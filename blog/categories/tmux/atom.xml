<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tmux | Milking Yaks]]></title>
  <link href="http://grota.github.com/blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://grota.github.com/"/>
  <updated>2012-05-09T23:43:37+02:00</updated>
  <id>http://grota.github.com/</id>
  <author>
    <name><![CDATA[Giuseppe Rota]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tmux: Clipboard Integration]]></title>
    <link href="http://grota.github.com/blog/2012/05/08/tmux-clipboard-integration/"/>
    <updated>2012-05-08T22:55:00+02:00</updated>
    <id>http://grota.github.com/blog/2012/05/08/tmux-clipboard-integration</id>
    <content type="html"><![CDATA[<p></p>

<p>This post is a follow-up to <a href="">my introduction to tmux</a>.</p>

<p>Since it is not feasible to go through all of my <a href="https://github.com/grota/dotfiles/blob/master/tmux/_tmux.conf">.tmux.conf</a> settings, I'll keep this post short and only talk about tmux's clipboard features, how I customized them, and how they relate to my workflow. Hopefully you will be able to find some value in this and be able to integrate my configuration snippets in your workflow.</p>

<!-- more -->


<p>Working in Linux, I am blessed by having two clipboards, a <em>system clipboard</em> (filled in by the typical <code>Ctrl-C</code> key combination) and the <em>selection clipboard</em>, (filled in by the mouse selection).
Since I usually keep fidgeting text in the browser with the mouse, the selection clipboard is more volatile for me.</p>

<p>Tmux, like vim, is modal: by typing the right sequence of keys you enter the so called <em>copy mode</em> which permits a section of a window or its history to be copied to a paste buffer for later insertion into another window.</p>

<p>The cool thing, compared to the system and selection clipboards, is that it's actually a set of buffers.
You can even list them, see the picture below.</p>

<p><img class="center" src="/images/posts/tmux_paste_buffers.png"></p>

<p>A common requirement that pops up in my workflow is being able to both read and write to the selection and system clipboards from tmux. For example:</p>

<ul>
<li>I need some text that is currently in my browser to reach <code>bash</code> and <code>vim</code> running inside tmux.</li>
<li>I need to copy some text inside the terminal (like some snippet of code, or a script output) into the browser.</li>
</ul>


<p>Both can be obtained by putting the following snippet of tmux configuration inside <code>.tmux.conf</code></p>

<p>```bash A piece of my .tmux.conf https://github.com/grota/dotfiles/blob/master/tmux/_tmux.conf Sauce</p>

<h1>C-c: save into system clipboard (+). With preselection.</h1>

<p>bind C-c choose-buffer "run \"tmux save-buffer -b %% - | xclip -i -sel clipboard\" \; run \" tmux display \\"Clipboard (+) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\" \" "</p>

<h1>C-v: copy from + clipboard.</h1>

<p>bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer" \; run "tmux display \"Copied from (+) $(xclip -o -sel clipboard | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""</p>

<h1>C-d: save into selection clipboard (*). With preselection.</h1>

<p>bind C-d choose-buffer "run \"tmux save-buffer -b %% - | xclip -i\" \; run \" tmux display \\"Clipboard (*) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\" \" "</p>

<h1>C-f: copy from * clipboard.</h1>

<p>bind C-f run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer" \; run "tmux display \"Copied from (*) $(xclip -o | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""
```</p>

<p>this makes use of the <a href="http://sourceforge.net/projects/xclip/">xclip</a> program to access the system and selection clipboards.</p>

<p>Now, while in tmux:</p>

<ol>
<li>Everytime you press the <code>prefix</code> key followed by <code>C-v</code> you will get the content of the system clipboard inside tmux.</li>
<li>Everytime you press the <code>prefix</code> key followed by <code>C-c</code> you will be asked to choose from the list of tmux paste-buffers. The buffer selected will be put into the system clipboard.</li>
</ol>


<p>The same <em>copy/paste</em> behaviour can be applied to the selection clipboard by using <code>C-f</code> and <code>C-d</code>.</p>

<p>Now admittedly point 1 above is not strictly necessary because there are usually system-wide shortcuts to do that, (<code>Shift-Ctrl-v</code> and <code>Shift-Insert</code> are the usual defaults in Linux) but I'm a sucker for symmetry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux: a terminal multiplexer full of niceties]]></title>
    <link href="http://grota.github.com/blog/2012/04/22/tmux-a-terminal-multiplexer-full-of-niceties/"/>
    <updated>2012-04-22T18:22:00+02:00</updated>
    <id>http://grota.github.com/blog/2012/04/22/tmux-a-terminal-multiplexer-full-of-niceties</id>
    <content type="html"><![CDATA[<p><a href="http://tmux.sourceforge.net/" title="tmux">Tmux</a> is a terminal multiplexer that has been around for a few years; doing a simple google search you will find some <a href="http://blog.hawkhost.com/2010/06/28/tmux-the-terminal-multiplexer/" title="hawkhost article">introductory</a> <a href="http://mutelight.org/articles/practical-tmux" title="Practical tmux">articles</a>.</p>

<p>There are quite a few plugins that create a seamless integration with <code>vim</code>: <a href="https://github.com/sjl/tslime.vim" title="Steve Losh's tslime">tslime</a>, <a href="http://thechangelog.com/post/20906204174/vimux-simple-extensible-vim-integration-with-tmux" title="vimux article">vimux</a> and <a href="http://esa-matti.suuronen.org/blog/2012/04/19/slimux-tmux-plugin-for-vim/" title="slimux">slimux</a>. People also use tmux extensively for <a href="http://thechangelog.com/post/20986196780/wemux-multi-user-terminal-multiplexing-for-party-pair-pr" title="wemux">remote pair programming</a>.</p>

<p>Tmux is a nicer and more modern alternative to screen. Beside being actively mantained tmux is also extremely configurable and scriptable.</p>

<!--more-->


<p>I discovered tmux only recently, mainly thanks to the <a href="http://thechangelog.com/tagged/tmux" title="The Changelog, #tmux">Changelog show</a> and the resulting buzz on the twittersphere. It was only a matter of time before a customized <code>.tmux.conf</code> entered the realms of <a href="http://github.com/grota/rcfiles" title="My rc files">my dotfiles</a>.</p>

<p>If you are a developer you work on text all day, and you might have a few script or long-running jobs executing in the shell. If that's the case, it's also very likely that you have to constantly switch between those applications.</p>

<p>You might not be aware of that, but constantly switching focus takes a toll on your brain, is a source of distraction, and is a major hindrance towards achieving what us developers crave, a state of mental performance called <strong><em><a href="http://en.wikipedia.org/wiki/Flow_(psychology)" title="The Flow, from wikipedia">the flow</a></em></strong>.
If that is case you should know that adopting a workflow based on tmux can reduce a lot of that background stress.<br/>
The most common pattern that emerges, for example, is being able to keep opened, side by side in the same tmux window, two panes: one with the shell and the other with terminal vim.</p>

<p>In the next post I'll describe how tmux helped me reduce a lot of the context switch that is major annoyance of mine while working, and a few configuration settings that make working with tmux a pleasure.</p>
]]></content>
  </entry>
  
</feed>
